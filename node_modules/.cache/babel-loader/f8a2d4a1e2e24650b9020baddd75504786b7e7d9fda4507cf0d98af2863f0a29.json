{"ast":null,"code":"var _jsxFileName = \"D:\\\\movie-explorer\\\\src\\\\context\\\\MovieContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { fetchTrendingMovies } from '../api/tmdb';\nimport { saveToLocalStorage, loadFromLocalStorage } from '../utils/localStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MovieContext = /*#__PURE__*/createContext();\nexport const MovieProvider = ({\n  children\n}) => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [favorites, setFavorites] = useState(loadFromLocalStorage('favorites') || []);\n  const [lastSearch, setLastSearch] = useState(loadFromLocalStorage('lastSearch') || '');\n  const [themeMode, setThemeMode] = useState('light');\n  useEffect(() => {\n    fetchTrendingMovies().then(res => setMovies(res.data.results));\n  }, []);\n  useEffect(() => {\n    saveToLocalStorage('favorites', favorites);\n  }, [favorites]);\n  useEffect(() => {\n    saveToLocalStorage('lastSearch', lastSearch);\n  }, [lastSearch]);\n  const addToFavorites = movie => {\n    if (!favorites.find(fav => fav.id === movie.id)) {\n      setFavorites([...favorites, movie]);\n    }\n  };\n  const removeFromFavorites = id => {\n    setFavorites(favorites.filter(movie => movie.id !== id));\n  };\n  const toggleTheme = () => {\n    setThemeMode(prev => prev === 'light' ? 'dark' : 'light');\n  };\n  return /*#__PURE__*/_jsxDEV(MovieContext.Provider, {\n    value: {\n      movies,\n      setMovies,\n      favorites,\n      addToFavorites,\n      removeFromFavorites,\n      lastSearch,\n      setLastSearch,\n      themeMode,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieProvider, \"3EQ5/beqFwBnZ6UEF9rynBVtc10=\");\n_c = MovieProvider;\nexport default MovieProvider;\nvar _c;\n$RefreshReg$(_c, \"MovieProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","fetchTrendingMovies","saveToLocalStorage","loadFromLocalStorage","jsxDEV","_jsxDEV","MovieContext","MovieProvider","children","_s","movies","setMovies","favorites","setFavorites","lastSearch","setLastSearch","themeMode","setThemeMode","then","res","data","results","addToFavorites","movie","find","fav","id","removeFromFavorites","filter","toggleTheme","prev","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/movie-explorer/src/context/MovieContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { fetchTrendingMovies } from '../api/tmdb';\nimport { saveToLocalStorage, loadFromLocalStorage } from '../utils/localStorage';\n\nexport const MovieContext = createContext();\n\nexport const MovieProvider = ({ children }) => {\n  const [movies, setMovies] = useState([]);\n  const [favorites, setFavorites] = useState(loadFromLocalStorage('favorites') || []);\n  const [lastSearch, setLastSearch] = useState(loadFromLocalStorage('lastSearch') || '');\n  const [themeMode, setThemeMode] = useState('light');\n\n  useEffect(() => {\n    fetchTrendingMovies().then(res => setMovies(res.data.results));\n  }, []);\n\n  useEffect(() => {\n    saveToLocalStorage('favorites', favorites);\n  }, [favorites]);\n\n  useEffect(() => {\n    saveToLocalStorage('lastSearch', lastSearch);\n  }, [lastSearch]);\n\n  const addToFavorites = (movie) => {\n    if (!favorites.find((fav) => fav.id === movie.id)) {\n      setFavorites([...favorites, movie]);\n    }\n  };\n\n  const removeFromFavorites = (id) => {\n    setFavorites(favorites.filter((movie) => movie.id !== id));\n  };\n\n  const toggleTheme = () => {\n    setThemeMode((prev) => (prev === 'light' ? 'dark' : 'light'));\n  };\n\n  return (\n    <MovieContext.Provider\n      value={{\n        movies,\n        setMovies,\n        favorites,\n        addToFavorites,\n        removeFromFavorites,\n        lastSearch,\n        setLastSearch,\n        themeMode,\n        toggleTheme,\n      }}\n    >\n      {children}\n    </MovieContext.Provider>\n  );\n};\nexport default MovieProvider;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,SAASC,mBAAmB,QAAQ,aAAa;AACjD,SAASC,kBAAkB,EAAEC,oBAAoB,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjF,OAAO,MAAMC,YAAY,gBAAGR,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMS,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAACI,oBAAoB,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;EACnF,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAACI,oBAAoB,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;EACtF,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,OAAO,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACdC,mBAAmB,CAAC,CAAC,CAACiB,IAAI,CAACC,GAAG,IAAIR,SAAS,CAACQ,GAAG,CAACC,IAAI,CAACC,OAAO,CAAC,CAAC;EAChE,CAAC,EAAE,EAAE,CAAC;EAENrB,SAAS,CAAC,MAAM;IACdE,kBAAkB,CAAC,WAAW,EAAEU,SAAS,CAAC;EAC5C,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEfZ,SAAS,CAAC,MAAM;IACdE,kBAAkB,CAAC,YAAY,EAAEY,UAAU,CAAC;EAC9C,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,MAAMQ,cAAc,GAAIC,KAAK,IAAK;IAChC,IAAI,CAACX,SAAS,CAACY,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKH,KAAK,CAACG,EAAE,CAAC,EAAE;MACjDb,YAAY,CAAC,CAAC,GAAGD,SAAS,EAAEW,KAAK,CAAC,CAAC;IACrC;EACF,CAAC;EAED,MAAMI,mBAAmB,GAAID,EAAE,IAAK;IAClCb,YAAY,CAACD,SAAS,CAACgB,MAAM,CAAEL,KAAK,IAAKA,KAAK,CAACG,EAAE,KAAKA,EAAE,CAAC,CAAC;EAC5D,CAAC;EAED,MAAMG,WAAW,GAAGA,CAAA,KAAM;IACxBZ,YAAY,CAAEa,IAAI,IAAMA,IAAI,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EAC/D,CAAC;EAED,oBACEzB,OAAA,CAACC,YAAY,CAACyB,QAAQ;IACpBC,KAAK,EAAE;MACLtB,MAAM;MACNC,SAAS;MACTC,SAAS;MACTU,cAAc;MACdK,mBAAmB;MACnBb,UAAU;MACVC,aAAa;MACbC,SAAS;MACTa;IACF,CAAE;IAAArB,QAAA,EAEDA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAAC3B,EAAA,CAjDWF,aAAa;AAAA8B,EAAA,GAAb9B,aAAa;AAkD1B,eAAeA,aAAa;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}